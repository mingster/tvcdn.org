<context>
# 1. Introduction
this project is a web portal for internet users to submit free-to-air m3u8 URLs. 
The project also provides APIs for iOS and Android devices.

# 2. Core Features
- Signed-in user can summit free-to-air m3u8 URLs. A URL object contains title, URL, and category field.
- Signed-in user can share a URL for free or non-free (by entering a monthly price).
- Signed-in user can maintain categories.  A cateogy contains title, public/private fields.
- Signed-in user can create list of URLs. A list contains: title, category, and URLs.
- Signed-in user can rate a a URL using 5 star rating scale.
- Signed-in user can report status of a URL. The status contains up or down. The report date time is kept as reference. 
- Signed-in user can play his/her list of URLs.
- provide api for iOS / Android devices.
- user can get paid by share his/her URLs.
- user can pay to access other user's URLs.
- paid subscriber can access iOS / Android app.


## 3. Scope
The application will consist of the following pages:
  - Home page: Displays a welcome message, categories, and a video player that play a list of m3u8 URLs.
  - About page: Provides information about the application.
  - Sign-in page: allow user to sign in via 3rd party oauth api.

Sign-in user can access the following pages:
  - URL submission page: Shows the full content of a selected blog post.


# User Experience  
[Describe the user journey and experience. Include:
- User personas
- Key user flows
- UI/UX considerations]
</context>

<PRD>
# Technical Architecture  
- next.js
- prisma ORD to access postgres database
- tailwindcss/ shadcn/UI
- i18next for globalization

# Functional Requirements
- **Routing:**
  - Implement client-side routing using `<Link>` component.
  - Implement dynamic routes for blog posts.
- **Components:**
  - Create a reusable `Header` component for navigation.
  - Develop a `BlogPostCard` component to display blog post previews.
- **Data Fetching:**
  - Fetch blog post data from a local JSON file.
  - Display fetched data on the home page and blog post page.


# Development Roadmap  
[Break down the development process into phases:
- MVP requirements
- Future enhancements
- Do not think about timelines whatsoever -- all that matters is scope and detailing exactly what needs to be build in each phase so it can later be cut up into tasks]

# Logical Dependency Chain
[Define the logical order of development:
- Which features need to be built first (foundation)
- Getting as quickly as possible to something usable/visible front end that works
- Properly pacing and scoping each feature so it is atomic but can also be built upon and improved as development approaches]

# Risks and Mitigations  
[Identify potential risks and how they'll be addressed:
- Technical challenges
- Figuring out the MVP that we can build upon
- Resource constraints]

# Appendix  
[Include any additional information:
- Research findings
- Technical specifications]



## 6. Non-Functional Requirements
- **Performance:**
  - Ensure fast page load times.
- **Responsiveness:**
  - Design the application to be responsive across different screen sizes.
- **Maintainability:**
  - Write clean and well-documented code.

## 7. Future Enhancements
- Implement user authentication.
- Add a commenting system for blog posts.
- Integrate with a database for data persistence.

</PRD>